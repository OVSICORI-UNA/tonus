#!/usr/bin/env python


"""
"""

# Python Standard Library
import argparse
import logging
import os

from datetime import date, timedelta

# Other dependencies
import obspy
import tonus

from obspy.signal.trigger import coincidence_trigger

# Local files


__author__ = 'Leonardo van der Laat'
__email__ = 'laat@umich.edu'


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        '--starttime',
        default=obspy.UTCDateTime(date.today() - timedelta(days=1)),
        help='Start time',
        type=obspy.UTCDateTime,
    )
    parser.add_argument(
        '--endtime',
        default=obspy.UTCDateTime(date.today()),
        help='End time',
        type=obspy.UTCDateTime,
    )

    return parser.parse_args()


def main():
    args = parse_args()

    c = tonus.config.set_conf()

    logging.info('Downloading waveforms...')
    if c.waveserver.name in 'fdsn earthworm'.split():
        client = tonus.waveserver.connect(**c.waveserver)

        st = client.get_waveforms(
            ','.join(c.detect.waveforms.network),
            ','.join(c.detect.waveforms.station),
            ','.join(c.detect.waveforms.location),
            ','.join(c.detect.waveforms.channel),
            args.starttime,
            args.endtime
        )
    elif c.waveserver.name == 'files':
        st = obspy.Stream()
        for filename in os.listdir(c.detect.io.input_dir):
            filepath = os.path.join(c.detect.io.input_dir, filename)
            try:
                st += obspy.read(filepath)
            except Exception as e:
                print(e)

    for tr in st:
        if tr.stats.station not in c.detect.waveforms.station \
           or tr.stats.channel not in c.detect.waveforms.channel:
            st.remove(tr)

    st.merge(fill_value='interpolate', interpolation_samples=-1)
    st.trim(args.starttime, args.endtime)

    logging.info('Pre-processing...')
    tonus.detection.preprocess.preprocess(st, **c.detect.filter)

    # Copy, since the get_cft modifies
    _st = st.copy()
    logging.info('Computing characteristic functions...')
    for tr in _st:
        logging.info(tr.stats.station + '-' + tr.stats.channel)
        tonus.detection.process.get_cft(
            tr,
            c.detect.window.short_win,
            c.detect.window.overlap,
            c.detect.window.pad,
            c.detect.tonality.k,
            c.detect.tonality.bin_width,
            c.detect.window.long_win,
        )

    logging.info('Detecting events...')
    events = coincidence_trigger(
        None,
        c.detect.trigger.thr_on,
        c.detect.trigger.thr_off,
        _st,
        c.detect.trigger.thr_coincidence_sum,
        max_trigger_length=c.detect.trigger.max_trigger_length,
        delete_long_trigger=c.detect.trigger.delete_long_trigger
    )

    logging.info('Writing output...')
    swarm_str = (
        f'{c.detect.waveforms.station[0]} '
        f'{c.detect.waveforms.channel[0]} '
        f'{c.detect.waveforms.network[0]}'
    )
    output = open(c.detect.io.output_file, 'w')
    for event in events:
        t = event['time'].datetime.strftime('%Y-%m-%d %H:%M:%S')
        output.write(f'{t},{swarm_str},{int(event["duration"])}\n')

    st[0].plot(type='dayplot', events=events)
    return


if __name__ == '__main__':
    LEVEL = logging.INFO
    FORMAT = '%(asctime)s %(levelname)s: %(message)s'
    DATEFMT = '%Y-%m-%d %H:%M:%S'

    logging.basicConfig(level=LEVEL, format=FORMAT, datefmt=DATEFMT)
    main()
